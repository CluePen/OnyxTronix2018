// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2231.robot.subsystems;

import org.usfirst.frc.team2231.robot.Robot;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Elevator extends Subsystem {
	private static final double maximumVoltage = 4.876;
	private static final double minimumVoltage = 0.00488;
	private static final int maximumHeight = 196;
	private static final int minimumHeight = 26;
	public final SpeedControllerGroup elevatorWheels = Robot.m_robotMap.elevatorWheels;
	public final AnalogInput m_potentiometer = Robot.m_robotMap.potentiometer;
	public final PIDController pidController = Robot.m_robotMap.elevatorPIDController;

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	@Override
	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void setSpeed(double speed) {
		elevatorWheels.set(speed);
	}

	public void stop() {
		elevatorWheels.set(0);
	}

	public void setHeight(double voltage) {
		pidController.setSetpoint(voltage);
	}

	public double getVoltageFromHeight(double height) {
		return mapRange(minimumHeight, maximumHeight, minimumVoltage, maximumVoltage, height);
	}

	public double getHeightFromVoltage(double voltage) {
		return mapRange(minimumVoltage, maximumVoltage, minimumHeight, maximumHeight, voltage);
	}

	public double mapRange(double firstMinimalValue, double firstMaximalValue, double secondMinimalValue,
			double secondMaximalValue, double value) {
		return secondMinimalValue + ((value - firstMinimalValue) * (secondMaximalValue - secondMinimalValue))
				/ (firstMaximalValue - firstMinimalValue);
	}
}